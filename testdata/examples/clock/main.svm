;
; svm-asm -include testdata -out testdata/test.a -debug examples/clock/main.svm
; svm-fdd -out testdata/test.img testdata/test.a
; svm -debug testdata/test.img
; 

include "sys/clock.svm"

:main {
    mov ria, $intHandler                                                       ; Define a new hardware interrupt handler.

    hwa clock.Device, $16#fffe, $16#0005                                       ; Find the clock device index.
    jez $exit

    mov r0, $clock.SetIntID                                                    ; Give clock a new, non-zero id.
    add r1, clock.Device, $1
    int clock.Device

    mov r0, $clock.SetTimer                                                    ; Start a new 1-second timer.
    mov r1, $1000
    int clock.Device

:loop
    wait $500
    jmp $loop

:exit
    halt
}

; Hardware interrupt handler.
:intHandler {
    ;
    ; Your interrupt handler code goes here.
    ;
    ; R0 contains the unique ID assigned to the clock device.
    ; Allows us to choose what code to run if multiple devices
    ; can trigger interrupts.

    pop r0                                                                     ; Be sure to restore R0 when exiting interrupt handler.
    ret                                                                        ; CPU doesn't do this for you!
}