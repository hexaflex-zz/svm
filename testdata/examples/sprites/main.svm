;
; svm-asm -import testdata -out testdata/test.a -debug examples/sprites
; svm-fdd -out testdata/test.img testdata/test.a
; svm -debug testdata/test.img
;

import "fd35"
import "gp14"
import "sprdi"
import "sys"
import "examples/sprites/font"

;------------------------------------------------------------------------------
; Program entrypoint.
;------------------------------------------------------------------------------
:main {
    call $setup

:loop
    gp14.JmpOnJustPressed $gp14.ButtonBack, $exit                              ; Exit the program if ButtonBack is pressed.
    gp14.CallOnJustPressed $gp14.ButtonA, $recolor                             ; Set text color to something random iff ButtonA was pressed.

    mov r0, $sprdi.Swap                                                        ; Present backbuffer.
    int sprdi.Device
    jmp $loop

:exit
    halt
}

;------------------------------------------------------------------------------
; recolor changes the last color in the background palette to a random value.
; This is the color used by our font sprites.
;------------------------------------------------------------------------------
:recolor {
    rng8 palette+45, $0, $16#ff                                                 ; Set the last palette color to something random.
    rng8 palette+46, $0, $16#ff
    rng8 palette+47, $0, $16#ff
    mov  r0, $sprdi.SetBackgroundPalette                                        ; reload background color palette.
    mov  r1, $palette
    int  sprdi.Device
    ret
}

;------------------------------------------------------------------------------
; setup initializes various devices properties.
;------------------------------------------------------------------------------
:setup {
    sys.Bootstrap $deviceNotFound

    fd35.SyncReadSector $(1 * fd35.SectorByteSize), $1                         ; Load extra sectors into memory. We are currently lacking some font sprites.
    fd35.SyncReadSector $(2 * fd35.SectorByteSize), $2
    fd35.SyncReadSector $(3 * fd35.SectorByteSize), $3
    fd35.SyncReadSector $(4 * fd35.SectorByteSize), $4

    mov r0, $sprdi.SetBackgroundPalette                                        ; Load custom background color palette.
    mov r1, $palette
    int sprdi.Device

    mov r0, $sprdi.SetBackgroundSprites                                        ; Load our font. Text sprites are loaded into the background for
    mov r1, $font.Sprites                                                      ; this example, so we don't have to handle per-sprite positioning.
    mov r2, $font.ASCIIOffset                                                  ; They are aligned to a 2D grid.
    mov r3, $font.SpriteCount
    int sprdi.Device

    mov r0, $sprdi.DrawBackground                                              ; Display text at center of display.
    mov r1, $str_helloWorld
    mov r2, $(14 * 32 + 10)
    mov r3, $len_helloWorld
    int sprdi.Device
    ret

:deviceNotFound
    halt
}


;------------------------------------------------------------------------------
; Variables & embedded data
;------------------------------------------------------------------------------
const len_helloWorld = 13
:str_helloWorld
    d8 $"Hello, world!"


; palette from: http://pixeljoint.com/forum/forum_posts.asp?TID=12795
:palette
    d8 $20, $12, $28        ; this one is always transparent
    d8 $68, $36, $52
    d8 $48, $52, $109
    d8 $78, $74, $78
    d8 $133, $76, $48
    d8 $52, $101, $36
    d8 $208, $70, $72
    d8 $117, $113, $97
    d8 $89, $125, $206
    d8 $210, $125, $44
    d8 $133, $149, $161
    d8 $109, $170, $44
    d8 $210, $170, $153
    d8 $109, $194, $202
    d8 $218, $212, $94
    d8 $222, $238, $214 
