;
; svm-asm -import testdata -out testdata/test.a -debug examples/sprites
; svm-fdd -out testdata/test.img testdata/test.a
; svm -debug testdata/test.img
;

import "fd35"
import "gp14"
import "sprdi"
import "sys"
import "examples/sprites/font"

;------------------------------------------------------------------------------
; Program entrypoint.
;------------------------------------------------------------------------------
:main {
    call $setup

:loop
    gp14.JmpOnJustPressed sys.Gamepad, $gp14.ButtonBack, $exit                 ; Exit the program if ButtonBack is pressed.
    gp14.CallOnJustPressed sys.Gamepad, $gp14.ButtonA, $recolor                ; Set text color to something random iff ButtonA was pressed.

    mov r0, $sprdi.Swap                                                        ; Present backbuffer.
    int sys.Display
    jmp $loop

:exit
    halt
}

;------------------------------------------------------------------------------
; recolor changes the last color in the background palette to a random value.
; This is the color used by our font sprites.
;------------------------------------------------------------------------------
:recolor {
    rng palette+30, $0, $16#ffff                                               ; Set the last palette color to something random.
    mov r0, $sprdi.SetBackgroundPalette                                        ; reload background color palette.
    mov r1, $palette
    int sys.Display
    ret
}

;------------------------------------------------------------------------------
; setup initializes various devices properties.
;------------------------------------------------------------------------------
:setup {
    call sys.Bootstrap

    fd35.SyncReadSector sys.Floppy, $(1 * fd35.SectorByteSize), $1             ; Load 3 extra sectors into memory. We are currently lacking some font sprites.
    fd35.SyncReadSector sys.Floppy, $(2 * fd35.SectorByteSize), $2
    fd35.SyncReadSector sys.Floppy, $(3 * fd35.SectorByteSize), $3

    mov r0, $sprdi.SetBackgroundPalette                                        ; Load custom background color palette.
    mov r1, $palette
    int sys.Display

    mov r0, $sprdi.SetBackgroundSprites                                        ; Load our font. Text sprites are loaded into the background for
    mov r1, $font.Sprites                                                      ; this example, so we don't have to handle per-sprite positioning.
    mov r2, $font.ASCIIOffset                                                  ; They are aligned to a 2D grid.
    mov r3, $font.SpriteCount
    int sys.Display

    mov r0, $sprdi.DrawBackground                                              ; Load text to display.
    mov r1, $str_helloWorld
    mov r2, $(14 * 32 + 10)                                                    ; Center line on display.
    mov r3, $len_helloWorld
    int sys.Display
    ret
}


;------------------------------------------------------------------------------
; Variables & embedded data
;------------------------------------------------------------------------------
const len_helloWorld = 13
:str_helloWorld
    d8 "Hello, world!"

:palette
    d16 0
    d16 2#11111_000000_00000
    d16 2#00000_000000_00000
    d16 2#00010_000010_00010
    d16 2#00100_000100_00100
    d16 2#01000_001000_01000
    d16 2#01010_001010_01010
    d16 2#10000_010000_10000
    d16 2#10010_010010_10010
    d16 2#10100_010100_10100
    d16 2#10110_010110_10110
    d16 2#11000_011000_11000
    d16 2#11010_011010_11010
    d16 2#11100_011100_11100
    d16 2#11110_011110_11110
    d16 2#11111_111111_11111
