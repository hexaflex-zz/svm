===============================================================================
 CPU & Architecture
===============================================================================

 Manufacturer:  0xFFFE
 Serialno.:     0x0001
 Document rev.: 23


 The CPU clock frequency is unbounded and limited by the host system and
 implementation. It has 65,536 bytes of byte-addressable memory and 12 builtin
 registers. Address values are 16 bits and so are all but one register.

    # | Name | Description
 -----|------|---------------------------------------------------------------
   00 |   R0 | 16 bit general purpose register.
   01 |   R1 | 16 bit general purpose register.
   02 |   R2 | 16 bit general purpose register.
   03 |   R3 | 16 bit general purpose register.
   04 |   R4 | 16 bit general purpose register.
   05 |   R5 | 16 bit general purpose register.
   06 |   R6 | 16 bit general purpose register.
   07 |   R7 | 16 bit general purpose register.
   08 |  RSP | 16 bit stack pointer.
   09 |  RIP | 16 bit instruction pointer.
   0a |  RIA | 16 bit interrupt address register.
   0b |  RST | 8 bit status register with layout: 00000cba
      |      | 
      |      | a: compare flag; used by comparison instructions. 
      |      | b: overflow flag; set when certain arithmetic 
      |      |    operations overflow. 
      |      | c: division by zero flag. 
      |      | 
      |      | Remaining bits are unused and reserved for future use.
 -----|------|----------------------------------------------------------------

 Directly writing to RSP, RIP or RST can have undesirable side effects and
 should be avoided.


================================================================================
 Instructions
================================================================================

 Operands can be either numeric literals, label names, registers or named
 constants.


   # | Name        | Description
 ====|=============|============================================================
  00 | NOP         | Do nothing (no-op) for one cycle.
  01 | HALT        | Unconditionally halts execution and shuts down the system.
  02 | MOV x y     | x = y
  03 | PUSH x      | Pushes x onto the callstack and decrements RSP by 2.
  04 | POP x       | Pops a value from the callstack, stores it in x and
     |             | increments RSP by 2.
  05 | RNG x y z   | x = pseudo-random 16-bit number in the range [y, z).
     |             | RST/overflow is 1 iff y - z < 0.
     |             | y and z are treated as unsigned.
  06 | SEED x      | Sets the seed for the RNG instruction to the value in x.
     |             | x is treated as unsigned.
 ----|-------------|------------------------------------------------------------
  07 | ADD x y z   | x = y + z
     |             | RST/overflow is 1 iff operation overflows.
  08 | SUB x y z   | x = y - z
     |             | RST/overflow is 1 iff operation overflows.
  09 | MUL x y z   | x = y * z
     |             | RST/overflow is 1 iff operation overflows.
  0a | DIV x y z   | x = y / z
     |             | RST/divide-by-zero is 1 iff z is 0.
  0b | MOD x y z   | x = y % z
     |             | RST/divide-by-zero is 1 iff z is 0.
  0c | SHL x y z   | x = y << z
     |             | z is treated as unsigned.
  0d | SHR x y z   | x = y >> z
     |             | z is treated as unsigned.
  0e | AND x y z   | x = y & z
  0f |  OR x y z   | x = y | z
  10 | XOR x y z   | x = y ^ z
  11 | ABS x y     | x = abs(y)
  12 | POW x y z   | x = pow(y, z)
     |             | RST/overflow is 1 iff operation overflows.
 ----|-------------|------------------------------------------------------------
  13 | CEQ x y     | RST/compare is 1 iff x == y
  14 | CNE x y     | RST/compare is 1 iff x != y
  15 | CGT x y     | RST/compare is 1 iff x > y
  16 | CGE x y     | RST/compare is 1 iff x >= y
  17 | CLT x y     | RST/compare is 1 iff x < y
  18 | CLE x y     | RST/compare is 1 iff x <= y
 ----|-------------|------------------------------------------------------------
  19 | JMP x       | Unconditionally jump to address x.
  1a | JEZ x       | Jump to address x iff RST/compare == 0
  1b | JNZ x       | Jump to address x iff RST/compare == 1
  1c | CALL x      | Pushes RIP onto the callstack and then jumps to x.
  1d | CLEZ x      | Pushes RIP onto the callstack and jumps to x iff
     |             | RST/compare = 0.
  1e | CLNZ x      | Pushes RIP onto the callstack and jumps to x iff
     |             | RST/compare = 1.
  1f | RET         | Pops return address from callstack and jumps to it.
 ----|-------------|------------------------------------------------------------
  20 | HWA x y z   | x = <Interrupt index for the device>. Where y is the
     |             | Manufacturer Id and z is the serial number.
     |             | RST/compare is 1 iff the device is found.
     |             | y and z are treated as unsigned.
  21 | INT x       | Trigger an interrupt on device x.
     |             | x is treated as unsigned.
 ----|-------------|------------------------------------------------------------
  22 | WAIT x      | Pause execution for x milliseconds.
  23 | IRET        | Returns from an interrupt handler.
     |             | Restores R0 from the stack.
     |             | Pops return address from callstack and jumps to it.
  24 | INC x       | Increments x by 1.
     |             | RST/overflow is 1 iff operation overflows.
  25 | DEC x       | Decrements x by 1.
     |             | RST/overflow is 1 iff operation overflows.
 ----|-------------|------------------------------------------------------------


================================================================================
 Operand type markers
================================================================================

 Instructions can be made to operate on signed- or unsigned, 8- or 16-bit
 values. Which one is used, depends on the prefix added to the operand expression.
 A prefix is optional and is one of the values in the table below.

   Prefix | Description
 ---------|--------------------------------------------------------------------
       u8 | Instruction operates on unsigned, 8-bit values.
      u16 | Instruction operates on unsigned, 16-bit values.
       i8 | Instruction operates on signed, 8-bit values.
      i16 | Instruction operates on signed, 16-bit values. This is the default
          | for instructions without a suffix.
 ---------|-------------------------------------------------------------------- 

 As a usage example:

   add x, y, z         - Operands are treated as signed, 16-bit values.
   add x, u8 y, u8 z   - Operands y and z are treated as unsigned, 8-bit values.



================================================================================
 Instruction Encoding
================================================================================

 Instructions are variable width. Meaning they encode to varying binary sizes,
 depending on the number- and type of their operands. The smallest being 1 byte
 and the widest being 10 bytes. The bit layout is as follows:

   aaaaaaaa bbbbbbbb bbbbbbbb bbbbbbbb
            cccccccc cccccccc cccccccc
            dddddddd dddddddd dddddddd

	a: 8 bit opcode.
   b: 0-, 8-, 24-bit operand A.
   c: 0-, 8-, 24-bit operand B.
   d: 0-, 8-, 24-bit operand C.

 Layout of an operand:

   aabbcccc dddddddd dddddddd

   a: 2 bit operand address mode:
      0 = immediate constant:  123
      1 = indirect constant:   mem[123]
      2 = immediate register:  r0
      3 = indirect register:   mem[r0]
   b: 2-bit type marker:
      0 = unsigned 8 bit
      1 = unsigned 16 bit
      2 = signed 8 bit
      3 = signed 16 bit
   c: 4-bit register index iff a is 2.
   d: 16-bit operand value iff a is 0 or 1.


================================================================================
 Hardware devices & Interrupts
================================================================================

 A CPU can connect to- and interact with hardware peripherals. Code can call
 functions on a given device using the INT instruction. Operands for these
 operations are passed through the general purpose registers. Which operands a
 given operation requires, is explained in the documentation for the respective
 device. The single argument for the INT instruction is the address where the
 device is mapped. Where a specific device is mapped can be discovered using the
 HWA instruction.

 Alternatively, each device can trigger a hardware interrupt on the CPU if it
 is configured to do so. For this to work, the program must set the RIA
 register to a valid non-zero address which forms the entrypoint for a custom
 interrupt handler. Each device that should be allowed to trigger interrupts,
 should be given a unique Interrupt Id through a INT operation. Once this
 id is assigned, the device is free to send an interrupt request to the CPU
 whenever necessary to fullfill a specific purpose. What this purpose is,
 depends on the device and is explain in the respective device documentation.

 Each interrupt request is added to a queue by the CPU. The queue has a maximum
 capacity of 32. Any interrupt requests sent when the queue is full, will be
 silently ignored. Each execution step, the CPU will check the queue for any
 pending messages and if found, will hand program control to the interrupt
 handler defined in RIA. Once this handler is finished, control returns to
 where it left off or a new pending interrupt. If interrupts are triggered too
 quickly, this can mean the CPU never gets to work on the regular program code.
 
 Note: the CPU treats a hardware interrupt as a CALL instruction to the handler
 defined in RIA. One should ensure the handler ends with a IRET instruction.
 This is a special version of RET, specifically for the interrupt handler.
 When the handler is executed, the CPU creates a callstack backup of R0
 register and then sets the register to the Interrupt Id provided by the
 hardware making the request. Once the handler returns, the IRET instruction
 ensures the R0 register is restored and the call stack remains balanced.


================================================================================
 Error conditions
================================================================================

 Whenever a program encounters an error, the system crashes.
 This happens under the following conditions:

 * Trying to jump to- or begin execution at an invalid memory address.
 * Attempting to trigger an interrupt on an unknown device.

